import numpy as np
import pandas as pd
import tensorflow as tf
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Embedding, LSTM, Dense, Dropout
from tensorflow.keras.optimizers import Adam
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import classification_report, accuracy_score, confusion_matrix

# 📌 1. טעינת הנתונים
file_path = r"C:\Users\jacob\Desktop\בינה מלאכותית תמר\spaaaam.csv"
data = pd.read_csv(file_path, encoding="latin-1")

# עיבוד הנתונים
data = data.rename(columns={"v1": "label", "v2": "message"})
data = data[['label', 'message']]
data['label'] = data['label'].map({'ham': 0, 'spam': 1})

print("התפלגות הנתונים:")
print(data['label'].value_counts())

# 📌 2. פילוח הנתונים
X = data['message'].values
y = data['label'].values

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# 📌 3. עיבוד טקסט - Tokenization & Padding
max_words = 5000  # מספר המילים המקסימלי בווקטור
max_length = 100  # אורך מקסימלי למשפטים

tokenizer = Tokenizer(num_words=max_words, oov_token="<OOV>")
tokenizer.fit_on_texts(X_train)

X_train_seq = tokenizer.texts_to_sequences(X_train)
X_test_seq = tokenizer.texts_to_sequences(X_test)

X_train_pad = pad_sequences(X_train_seq, maxlen=max_length, padding='post')
X_test_pad = pad_sequences(X_test_seq, maxlen=max_length, padding='post')

# 📌 4. בניית המודל LSTM
model = Sequential([
    Embedding(input_dim=max_words, output_dim=64, input_length=max_length),
    LSTM(128, return_sequences=True),
    Dropout(0.3),
    LSTM(64),
    Dense(32, activation='relu'),
    Dropout(0.3),
    Dense(1, activation='sigmoid')
])

# 📌 5. הידור המודל
model.compile(loss='binary_crossentropy', optimizer=Adam(learning_rate=0.001), metrics=['accuracy'])

# הדפסת תקציר המודל
model.summary()

# 📌 6. אימון המודל
history = model.fit(X_train_pad, y_train, epochs=5, batch_size=32, validation_data=(X_test_pad, y_test))

# 📌 7. הערכת ביצועי המודל
y_pred_prob = model.predict(X_test_pad)
y_pred = (y_pred_prob > 0.5).astype(int)

print("\n📌 דיוק המודל:", accuracy_score(y_test, y_pred))
print("\n📌 דוח סיווג:\n", classification_report(y_test, y_pred))

# 📌 8. הצגת גרף דיוק ואובדן (Loss)
plt.figure(figsize=(12, 5))

# גרף דיוק
plt.subplot(1, 2, 1)
plt.plot(history.history['accuracy'], label='Accuracy (Train)')
plt.plot(history.history['val_accuracy'], label='Accuracy (Test)')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.legend()
plt.title('Model Accuracy')

# גרף אובדן
plt.subplot(1, 2, 2)
plt.plot(history.history['loss'], label='Loss (Train)')
plt.plot(history.history['val_loss'], label='Loss (Test)')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend()
plt.title('Model Loss')

plt.show()
