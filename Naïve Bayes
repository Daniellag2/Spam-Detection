import time

real_start_time = time.time()
import pandas as pd
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import confusion_matrix
import matplotlib.pyplot as plt
import seaborn as sns

spam =  pd.read_csv("C:/Users/jacob/Desktop/בינה מלאכותית /spaaaam.csv")

print(spam.columns)
print(spam.head(10))

X = spam['v2']
y = spam['v1']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1)

cv = CountVectorizer()
features = cv.fit_transform(X_train)

start_time = time.time()
model = MultinomialNB()
model.fit(features, y_train)
nb_train_time = time.time() - start_time

features_test = cv.transform(X_test)
start_time = time.time()
y_pred = model.predict(features_test)
nb_test_time = time.time() - start_time

# calculate confusion matrix
cm = confusion_matrix(y_test, y_pred)

print(f"Accuracy of the naive bayes model: {model.score(features_test, y_test) * 100}%")
print("Naive Bayes train time: ", nb_train_time)
print("Naive Bayes test time: ", nb_test_time)

print(f"Confusion matrix:")
print("True Negative: {} False Positive: {}\nFalse Negative: {} True Positive: {}".format(cm[0][0], cm[0][1], cm[1][0],
                                                                                          cm[1][1]))

# visualize confusion matrix
sns.heatmap(cm, annot=True, fmt='d')
plt.xlabel('Predicted')
plt.ylabel('Actual')
print("Naive Bayes total time: ", time.time() - real_start_time)
plt.show()
